	package cl.awakelab.bootcamp.controller;
	
	import cl.awakelab.bootcamp.controller.interfaces.IUserController;
import cl.awakelab.bootcamp.model.entity.Book;
import cl.awakelab.bootcamp.model.entity.User;

	import java.math.BigInteger;
	import java.security.MessageDigest;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

// import java.sql.Statement;
	import com.google.gson.Gson;
	import connection.DBConnection;
	
	public class UserController implements IUserController{
	
		@Override
		public String login(String username, String password) {
		    Gson gson = new Gson();
		    DBConnection conexion = DBConnection.getInstance();

		    String sql = "SELECT * FROM users WHERE username = ?";

		    try {
		        PreparedStatement statement = conexion.getConnection().prepareStatement(sql);
		        statement.setString(1, username);
		        ResultSet rs = statement.executeQuery();

		        if (rs.next()) {
		            String storedPassword = rs.getString("password");
		            if (verifyPassword(password, storedPassword)) {
		                String name = rs.getString("name");
		                String lastName = rs.getString("lastname");
		                String email = rs.getString("email");
		                double balance = rs.getDouble("balance");
		                boolean premium = rs.getBoolean("premium");

		                User user = new User(username, "", name, lastName, email, balance, premium);
		                return gson.toJson(user);
		            }
		        }
		    } catch (Exception e) {
		        System.out.println(e.getMessage());
		    }

		    return "false";
		}

		private boolean verifyPassword(String plainPassword, String hashedPassword) {
		    try {
		        MessageDigest md = MessageDigest.getInstance("SHA-256");
		        md.update(plainPassword.getBytes());
		        byte[] digest = md.digest();
		        String hashedPlainPassword = String.format("%064x", new BigInteger(1, digest));

		        return hashedPlainPassword.equals(hashedPassword);
		    } catch (Exception e) {
		        System.out.println(e.getMessage());
		    }

		    return false;
		}

		public String login2(String username, String password) {
			Gson gson = new Gson();
			DBConnection conexion = DBConnection.getInstance();
			
			// String sql = "SELECT * FROM users WHERE username = '" + username + "' and password = '" + password + "'";
			String sql = "SELECT * FROM users WHERE username = ? and password = ?";
			
		   try {
			   /*Statement statement = conexion.getConnection().createStatement();
			   ResultSet rs = statement.executeQuery(sql);*/
			   
			   	PreparedStatement statement = conexion.getConnection().prepareStatement(sql);
			    statement.setString(1, username);
			    statement.setString(2, password);
			    ResultSet rs = statement.executeQuery();
			   
			   while(rs.next()) {
				   String name = rs.getString("name");
				   String lastName = rs.getString("lastname");
				   String email = rs.getString("email");
				   double balance = rs.getDouble("balance");
				   boolean premium = rs.getBoolean("premium");
				   
				   User user = new User(username , password,name, lastName, email, balance, premium); 
				   // System.out.println(user.toString());
				   // User user = new User("", "",name, lastName, email, balance, premium); 
				 
				   return gson.toJson(user);
				   
			   }
		   } catch (Exception e) {
			   System.out.println(e.getMessage());
		   }
		   
		   return "false";
	
		}

		@Override
		public void register(String username, String password) {
		    DBConnection conexion = DBConnection.getInstance(); // Obtiene una instancia de la conexión a la base de datos

		    String sql = "INSERT INTO users (username, password, name, lastname, email, balance, premium) VALUES(?, ?, ?, ?, ?, ?, ?)"; // Consulta SQL para insertar un nuevo usuario en la tabla 'users'

		    try {
		        MessageDigest md = MessageDigest.getInstance("SHA-256"); // Obtiene una instancia del algoritmo de encriptación SHA-256
		        md.update(password.getBytes()); // Actualiza el mensaje a encriptar con los bytes de la contraseña
		        byte[] digest = md.digest(); // Genera el hash de la contraseña encriptada
		        String hashedPassword = String.format("%064x", new BigInteger(1, digest)); // Convierte el hash en una representación hexadecimal

		        PreparedStatement preparedStatement = conexion.getConnection().prepareStatement(sql); // Prepara la consulta SQL para ejecutarla en la conexión a la base de datos
		        preparedStatement.setString(1, username); // Establece el valor del primer parámetro (username) en la consulta SQL
		        preparedStatement.setString(2, hashedPassword); // Establece el valor del segundo parámetro (password) en la consulta SQL

		        // Establece los valores de los demás campos en la consulta SQL como cadenas vacías, 0 y false, respectivamente
		        preparedStatement.setString(3, "");
		        preparedStatement.setString(4, "");
		        preparedStatement.setString(5, "");
		        preparedStatement.setDouble(6, 0.0);
		        preparedStatement.setBoolean(7, false);

		        preparedStatement.executeUpdate(); // Ejecuta la consulta SQL para insertar el nuevo usuario en la base de datos
		    } catch (Exception e) {
		        System.out.println(e.getMessage()); // Imprime cualquier excepción que ocurra durante el proceso de registro
		    }
		}

		@Override
		public List<Book> findAllBooks() {
			List<Book> books = new ArrayList<>(); 
			DBConnection conexion = DBConnection.getInstance();
			String sql = "SELECT * FROM books";
			
			try {
				PreparedStatement statement = conexion.getConnection().prepareStatement(sql);
				ResultSet rs = statement.executeQuery();
				
				while(rs.next()) {
					
					int id = rs.getInt("id");;
					String title = rs.getString("title");;
					String genre = rs.getString("genre");
					String author = rs.getString("author");
					int copies = rs.getInt("copies");
					boolean novelty = rs.getBoolean("novelty");
					 
					Book book = new Book(id,title,genre,author,copies,novelty); 
					   // System.out.println(user.toString());
					   // User user = new User("", "",name, lastName, email, balance, premium); 
				
					   
				   }
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
			
			return books.add(book);
			  
		}

	
	}
